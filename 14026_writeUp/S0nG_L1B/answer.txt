After I registered in the portal and logged in, I found an interface which asked for <username> and <password>. After trying some SQL injections, I found that this form was vulnerable to SQL injection. After spending much time on it and executing some SQL injections, it showed me an error which told me it had columns  <id>, <username>, <password_hash> and <salt>. I also got to know that it was using sha256() on <salt + password>(password entered in the password field) and comapring it with <password_hash>. So after some trial and error, I tried the folllowing SQL injection on the form:

username: < ' UNION select '42' as id, '13601bda4ea78e55a07b98866d2be6be0744e3866f13c00c811cab608a28f322' as password_hash, 'salt' as salt order by salt asc; -- >
password: <password>

The UNION in the query executes one more SQL query in addition to checking the username. The id <42> for my username was found using brute force. After logging into my id, I found an image. I also opened the <admin> account and found the hint <8020> in the sorce HTML of the page. This clearly was a port number. When I naviagated to this port, I found a form which took as input a string and displayed an image which was encoded form of the string. When I entered <cs628a{aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}>(as this is the format of flag for every question) in the form, I got and image which resembeled a lot to the image I found on my userid. When I tried changing the characters of the above string, I found that every character changed only a specific position in the image, i.e., specific portions of image were dedicated to specific positions of the string entered. So, I wrote a script which found the flag incrementally, i.e. for every position in the above string, it finds 16 different images(as characyers can only be [a-f0-9]) and compares them to the image found on my userid. The image which matches the maximum, the character corresponding to that image is finalized for that particular position. After this, we jump to next characer and do the same. So, time complexity of this operation was O(16*32) as we only have to guess 32 characters(inside {}) and there are 16 possibilities for each position. The script I wrote was <new_song.py>. Running that script gave me the flag. 